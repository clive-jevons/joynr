<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  %%
  Copyright (C) 2011 - 2015 BMW Car IT GmbH
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<artifactId>libjoynr-js</artifactId>
	<groupId>io.joynr.javascript</groupId>
	<packaging>jar</packaging>
	<name>${project.groupId}:${project.artifactId}</name>
	<description>JOYnr JavaScript libjoynr-js</description>

	<parent>
		<groupId>io.joynr</groupId>
		<artifactId>javascript</artifactId>
		<version>0.13.1-SNAPSHOT</version>
	</parent>

	<properties>
		<atmosphere.javascript.version>2.0.9</atmosphere.javascript.version>
		<requirejs.version>2.1.14</requirejs.version>
		<bluebird.version>2.9.9</bluebird.version>
		<jasmine.version>1.3.1</jasmine.version>
		<log4javascript.version>1.4.10</log4javascript.version>
		<jetty.version>9.2.13.v20150730</jetty.version>
		<phantomjs-maven-plugin.version>0.4</phantomjs-maven-plugin.version>
		<netbeans.hint.deploy.server>gfv3ee6</netbeans.hint.deploy.server>
		<project.build.optimizerResources>${project.build.directory}/build-resources/almond</project.build.optimizerResources>
		<joynr.provisioning.bounceProxyBaseUrl>http://127.0.0.1:8080</joynr.provisioning.bounceProxyBaseUrl>
		<joynr.provisioning.testTtl>5000</joynr.provisioning.testTtl>
	</properties>

	<dependencies>
		<dependency>
			<groupId>io.joynr.javascript</groupId>
			<artifactId>js-dependencies</artifactId>
			<version>${project.version}</version>
		</dependency>
	</dependencies>

	<build>
		<sourceDirectory>src/main/js</sourceDirectory>
		<resources>
			<resource>
				<directory>src/main/js</directory>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/generated</directory>
			</resource>
		</resources>

		<testSourceDirectory>src/test/js</testSourceDirectory>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
			<!-- the source folder must be copied as resource since otherwise only
				java files would be copied -->
			<testResource>
				<directory>src/test/js</directory>
				<filtering>true</filtering>
			</testResource>
			<testResource>
				<directory>src/test/generated</directory>
			</testResource>
		</testResources>

		<plugins>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/main/generated</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets>
						<fileset>
							<directory>src/main/generated</directory>
							<includes>
								<include>**</include>
							</includes>
						</fileset>
						<fileset>
							<directory>src/test/generated</directory>
							<includes>
								<include>**</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>

			<plugin>
				<groupId>io.joynr.tools.generator</groupId>
				<artifactId>joynr-generator-maven-plugin</artifactId>
				<configuration>
					<generationLanguage>javascript</generationLanguage>
					<parameter>
						<requiredModule>joynr</requiredModule>
						<anonymuousDefine>false</anonymuousDefine>
					</parameter>
				</configuration>
				<executions>
					<execution>
						<id>discovery-types</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<model>joynr/DiscoveryTypes.fidl</model>
							<outputPath>${basedir}/src/main/generated</outputPath>
						</configuration>
					</execution>
					<execution>
						<id>discovery</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<model>joynr/Discovery.fidl</model>
							<outputPath>${basedir}/src/main/generated</outputPath>
						</configuration>
					</execution>
					<execution>
						<id>routing</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<model>joynr/Routing.fidl</model>
							<outputPath>${basedir}/src/main/generated</outputPath>
						</configuration>
					</execution>
					<execution>
						<id>capabilitiesDirectory</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<model>joynr/GlobalCapabilitiesDirectory.fidl</model>
							<outputPath>${basedir}/src/main/generated</outputPath>
						</configuration>
					</execution>
					<execution>
						<id>channelURLDirectory</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<model>joynr/ChannelUrlDirectory.fidl</model>
							<outputPath>${basedir}/src/main/generated</outputPath>
						</configuration>
					</execution>
					<execution>
						<id>distributedLogging</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<model>system/LoggingService.fidl</model>
							<outputPath>${basedir}/src/main/generated</outputPath>
						</configuration>
					</execution>
					<execution>
						<id>types</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<model>common/Types.fidl</model>
							<outputPath>${basedir}/src/main/generated</outputPath>
						</configuration>
					</execution>
					<execution>
						<id>datatypesProxyAndProvider</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<!-- parameter>
								<requiredModule>joynr</requiredModule>
							</parameter-->
							<model>${basedir}/model/datatypes.fidl</model>
							<outputPath>${basedir}/src/test/generated</outputPath>
						</configuration>
					</execution>
					<execution>
						<id>radioProxyAndProvider</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<model>${basedir}/model/radio.fidl</model>
							<outputPath>${basedir}/src/test/generated</outputPath>
						</configuration>
					</execution>
					<execution>
						<id>testProxyAndProvider</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<model>Test.fidl</model>
							<outputPath>${basedir}/src/test/generated</outputPath>
						</configuration>
					</execution>
					<execution>
						<id>testTypes</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<model>TestTypes.fidl</model>
							<outputPath>${basedir}/src/test/generated</outputPath>
						</configuration>
					</execution>
					<execution>
						<id>generate-franca-name-test-model</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<model>FrancaNameTest.fidl</model>
							<outputPath>${basedir}/src/test/generated</outputPath>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>io.joynr.tools.generator</groupId>
						<artifactId>js-generator</artifactId>
						<version>${project.version}</version>
					</dependency>
					<dependency>
						<groupId>io.joynr</groupId>
						<artifactId>basemodel</artifactId>
						<version>${project.version}</version>
					</dependency>
					<dependency>
						<groupId>io.joynr</groupId>
						<artifactId>basemodel</artifactId>
						<version>${project.version}</version>
						<type>test-jar</type>
					</dependency>
				</dependencies>
			</plugin>

			<!-- Maven eclipse plugin for better eclipse integration -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.eclipse.wst.jsdt.core.jsNature</projectnature>
					</additionalProjectnatures>
				</configuration>
			</plugin>

			<!-- Unpack JavaScript dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack-public-js-source-dependencies</id>
						<goals>
							<goal>unpack</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>io.joynr.javascript</groupId>
									<artifactId>js-dependencies</artifactId>
									<version>${project.version}</version>
									<type>jar</type>
									<outputDirectory>${project.build.directory}/dependencies/</outputDirectory>
									<includes>JsonParser/JsonParser.js,uuid/uuid-annotated.js,log4javascript/log4javascript_uncompressed.js</includes>
								</artifactItem>
								<artifactItem>
									<groupId>io.joynr.tools</groupId>
									<artifactId>build-resources</artifactId>
									<version>${project.version}</version>
									<outputDirectory>${project.build.directory}/build-resources</outputDirectory>
									<includes>js-formatter/code-formatter-config.xml,
											  js-test-driver/phantomjs-jstd.js,
											  almond/almond-0.2.5.js</includes>
								</artifactItem>
								<artifactItem>
									<groupId>org.atmosphere.client</groupId>
									<artifactId>javascript</artifactId>
									<version>${atmosphere.javascript.version}</version>
									<type>war</type>
									<outputDirectory>${project.build.directory}/dependencies/atmosphere</outputDirectory>
									<includes>javascript/*.js</includes>
								</artifactItem>
								<artifactItem>
									<groupId>org.webjars</groupId>
									<artifactId>log4javascript</artifactId>
									<version>${log4javascript.version}</version>
									<type>jar</type>
									<outputDirectory>${project.build.directory}/dependencies/log4javascript</outputDirectory>
									<includes>META-INF/resources/webjars/log4javascript/${log4javascript.version}/log4javascript.js</includes>
								</artifactItem>
								<artifactItem>
									<groupId>org.webjars</groupId>
									<artifactId>bluebird</artifactId>
									<version>${bluebird.version}</version>
									<type>jar</type>
									<outputDirectory>${project.build.directory}/dependencies/bluebird</outputDirectory>
									<includes>META-INF/resources/webjars/bluebird/${bluebird.version}/bluebird.js</includes>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
					<execution>
						<id>unpack-public-js-test-dependencies</id>
						<goals>
							<goal>unpack</goal>
						</goals>
						<phase>generate-test-resources</phase>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.webjars</groupId>
									<artifactId>requirejs</artifactId>
									<version>${requirejs.version}</version>
									<type>jar</type>
									<outputDirectory>${project.build.directory}/test-lib/requirejs</outputDirectory>
									<includes>META-INF/resources/webjars/requirejs/${requirejs.version}/require.js</includes>
								</artifactItem>
								<artifactItem>
									<groupId>org.webjars</groupId>
									<artifactId>jasmine</artifactId>
									<version>${jasmine.version}</version>
									<type>jar</type>
									<outputDirectory>${project.build.directory}/test-lib/jasmine</outputDirectory>
									<includes>META-INF/resources/webjars/jasmine/${jasmine.version}/jasmine.js</includes>
								</artifactItem>
								<artifactItem>
									<groupId>io.joynr.javascript</groupId>
									<artifactId>js-dependencies</artifactId>
									<version>${project.version}</version>
									<type>jar</type>
									<outputDirectory>${project.build.directory}/test-lib/</outputDirectory>
									<includes>jasmine_jstd_adapter/JasmineAdapter.js</includes>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>
            <!--
             Since the configuration of the maven-java-formatter-plugin is changed
             in the plugin management section, we need to add the plugin again in the
             plugin section, even it is already configured in the super POM. Otherwise
             the configuration is not set correctly on sub modules.
             -->
			<plugin>
				<groupId>com.marvinformatics.formatter</groupId>
				<artifactId>formatter-maven-plugin</artifactId>
			</plugin>

			<!-- jslint-ing src/main/js -->
			<plugin>
				<groupId>com.googlecode.jslint4java</groupId>
				<artifactId>jslint4java-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>lint-project</id>
						<phase>process-sources</phase>
					</execution>
				</executions>
			</plugin>
			<!-- Copy over dependencies to lib -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-source-dependencies</id>
						<phase>process-sources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/classes/lib/</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}/dependencies/atmosphere/javascript/</directory>
									<includes>
										<include>atmosphere.js</include>
										<include>atmosphere-min.js</include>
									</includes>
								</resource>
								<resource>
									<directory>${project.build.directory}/dependencies/log4javascript/META-INF/resources/webjars/log4javascript/${log4javascript.version}/</directory>
									<includes>
										<include>log4javascript.js</include>
									</includes>
								</resource>
								<resource>
									<directory>${project.build.directory}/dependencies/bluebird/META-INF/resources/webjars/bluebird/${bluebird.version}/</directory>
									<includes>
										<include>bluebird.js</include>
									</includes>
								</resource>
								<resource>
									<directory>${project.build.directory}/dependencies/JsonParser/</directory>
									<includes>
										<include>JsonParser.js</include>
									</includes>
								</resource>
								<resource>
									<directory>${project.build.directory}/dependencies/uuid/</directory>
									<includes>
										<include>uuid-annotated.js</include>
									</includes>
								</resource>
								<resource>
									<directory>${project.build.directory}/dependencies/log4javascript/</directory>
									<includes>
										<include>log4javascript_uncompressed.js</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- the nodejs plugin is used to temp-install node.js to speed up performance of the
				requirejs optimizer step -->
			<plugin>
				<groupId>com.github.skwakman.nodejs-maven-plugin</groupId>
				<artifactId>nodejs-maven-plugin</artifactId>
				<version>1.0.5-node-0.10.25</version>
				<executions>
					<execution>
						<goals>
							<goal>extract</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<targetDirectory>
						${project.build.directory}/nodejs/
					</targetDirectory>
				</configuration>
			</plugin>
			<!-- The require.js optimizer builds the single libjoynr.js that includes
				all exported require.js modules and their dependencies -->
			<plugin>
				<groupId>com.github.bringking</groupId>
				<artifactId>requirejs-maven-plugin</artifactId>
				<version>2.0.4</version>
				<executions>
					<execution>
						<id>generate-libjoynr-js</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>optimize</goal>
						</goals>
						<configuration>
							<runner>nodejs</runner>
							<nodeExecutable>${project.build.directory}/nodejs/node</nodeExecutable>
							<!-- path to optimizer json config file -->
							<configFile>${basedir}/src/main/optimizer/config/require.optimizer.inprocess.js</configFile>
						</configuration>
					</execution>
					<execution>
						<id>generate-libjoynr-intertab-libjoynr-js</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>optimize</goal>
						</goals>
						<configuration>
							<runner>nodejs</runner>
							<nodeExecutable>${project.build.directory}/nodejs/node</nodeExecutable>
							<!-- path to optimizer json config file -->
							<configFile>${basedir}/src/main/optimizer/config/require.optimizer.intertab.libjoynr.js</configFile>
						</configuration>
					</execution>
					<execution>
						<id>generate-libjoynr-intertab-clustercontroller-js</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>optimize</goal>
						</goals>
						<configuration>
							<!-- path to optimizer json config file -->
							<configFile>${basedir}/src/main/optimizer/config/require.optimizer.intertab.clustercontroller.js</configFile>
						</configuration>
					</execution>
					<execution>
						<id>generate-libjoynr-websocket-libjoynr-js</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>optimize</goal>
						</goals>
						<configuration>
							<runner>nodejs</runner>
							<nodeExecutable>${project.build.directory}/nodejs/node</nodeExecutable>
							<!-- path to optimizer json config file -->
							<configFile>${basedir}/src/main/optimizer/config/require.optimizer.websocket.libjoynr.js</configFile>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<!-- Whether or not to process configFile with maven filters. If you
						use this option, some options in your configFile must resolve to
						absolutepaths (see below) -->
					<filterConfig>true</filterConfig>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.github.klieber</groupId>
				<artifactId>phantomjs-maven-plugin</artifactId>
				<version>${phantomjs-maven-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>install</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<version>1.9.7</version>
				</configuration>
			</plugin>
			<!-- JsTestDriver for javascript tests -->
			<plugin>
				<groupId>com.googlecode.jstd-maven-plugin</groupId>
				<artifactId>jstd-maven-plugin</artifactId>
				<version>1.3.5.1</version>
				<!-- configuration options documentation:
					http://code.google.com/p/js-test-driver/wiki/CommandLineFlags -->
				<configuration>
					<port>42442</port>
					<server>http://127.0.0.1:42442</server>
					<browser>${phantomjs.binary};--web-security=no;--local-storage-path=${project.build.directory};${project.build.directory}/build-resources/js-test-driver/phantomjs-jstd.js;%s</browser>
					<testOutput>${project.build.directory}/jstd-test-results</testOutput>
					<runnerMode>QUIET</runnerMode>
					<verbose>true</verbose>
					<captureConsole>true</captureConsole>
					<reset>true</reset>
				</configuration>
				<executions>
					<execution>
						<id>run-unit-tests</id>
						<phase>test</phase>
						<configuration>
							<config>${project.build.testOutputDirectory}/UnitTests.conf</config>
						</configuration>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
					<execution>
						<id>run-integration-tests</id>
						<phase>integration-test</phase>
						<configuration>
							<config>${project.build.testOutputDirectory}/IntegrationTests.conf</config>
						</configuration>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
					<execution>
						<id>run-system-integration-tests</id>
						<phase>integration-test</phase>
						<configuration>
							<config>${project.build.testOutputDirectory}/SystemIntegrationTests.conf</config>
						</configuration>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
					<execution>
						<id>run-intertab-integration-tests</id>
						<phase>integration-test</phase>
						<configuration>
							<config>${project.build.testOutputDirectory}/InterTabIntegrationTests.conf</config>
						</configuration>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Configure packaging of production version matter libjoynr-js -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<includes>
						<include>JoynrBuildSignature.js</include>
						<include>LICENSE</include>
						<include>NOTICE</include>
						<include>DISCLAIMER</include>
						<include>META-INF/licenses/*</include>
						<include>js/joynr.intertab.js</include>
						<include>js/joynr.js</include>
						<include>js/joynr.intertab.clustercontroller.js</include>
						<include>js/joynr.websocket.js</include>
					</includes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.phasebash.jsdoc</groupId>
				<artifactId>jsdoc3-maven-plugin</artifactId>
				<version>1.1.0</version>
				<inherited>false</inherited>
				<executions>
 					<execution>
 						<goals>
 							<goal>jsdoc3</goal>
 						</goals>
 						<phase>process-sources</phase>
 					</execution>
				</executions>
				<configuration>
					<!--verbose argument is not supported in outdated JSDoc 3.2.3 shipped with
						jsdoc3-maven-plugin 1.1.0 -> plugin verboseOutput in conf.json-->
					<directoryRoots>
						<directoryRoot>src/main/js</directoryRoot>
						<directoryRoot>src/main/generated</directoryRoot>
					</directoryRoots>
					<recursive>true</recursive>
					<!--the lenient=false (default) argument is replaced by pedantic=true in newer
						JSDoc versions-->
					<lenient>false</lenient>
					<outputDirectory>${project.build.directory}/jsdoc</outputDirectory>
					<includePrivate>false</includePrivate>
					<configFile>jsdoc3.conf.json</configFile>
				</configuration>
			</plugin>
			<!-- NOTE the license to be added to the source header files must be
				specifically (redundantly) defined below -->
			<!-- This is a shortcoming of the license-maven-plugin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<configuration>
					<verbose>false</verbose>
					<addSvnKeyWords>true</addSvnKeyWords>
					<licenseName>apache_v2</licenseName>
					<roots>
						<root>.</root>
					</roots>
					<excludes>
						<!-- libjoynrEndFrag.js is the end fragment which surrounds the
						     result of the almond optimizer. Its counter part,
						     libjoynrStartFrag.js, already contains the joynr compatible
						     file header
						-->
						<exclude>jsdoc3.conf.json</exclude>
						<exclude>src/main/resources/libjoynrEndFrag.js</exclude>
						<exclude>src/main/resources/package.json</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only.
					It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											com.github.klieber
										</groupId>
										<artifactId>
											phantomjs-maven-plugin
										</artifactId>
										<versionRange>
											[0.4,)
										</versionRange>
										<goals>
											<goal>install</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											com.github.skwakman.nodejs-maven-plugin
										</groupId>
										<artifactId>
											nodejs-maven-plugin
										</artifactId>
										<versionRange>
											[1.0.2,)
										</versionRange>
										<goals>
											<goal>extract</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											com.marvinformatics.formatter
										</groupId>
										<artifactId>
											formatter-maven-plugin
										</artifactId>
										<versionRange>
											[1.4.0,)
										</versionRange>
										<goals>
											<goal>format</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<profiles>
		<profile>
			<id>my-test-plugins</id>

			<activation>
				<property>
					<name>skipTests</name>
					<value>false</value>
				</property>
			</activation>
			<build>
				<plugins>
			<!-- Unpack JavaScript dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-backend-wars</id>
						<phase>initialize</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>io.joynr.java.messaging.bounceproxy</groupId>
									<artifactId>single-bounceproxy</artifactId>
									<version>${project.version}</version>
									<type>war</type>
									<outputDirectory>${project.build.directory}</outputDirectory>
									<destFileName>bounceproxy.war</destFileName>
								</artifactItem>
								<artifactItem>
									<groupId>io.joynr.java.backend-services</groupId>
									<artifactId>domain-access-controller-servlet</artifactId>
									<version>${project.version}</version>
									<type>war</type>
									<outputDirectory>${project.build.directory}</outputDirectory>
									<destFileName>accesscontrol.war</destFileName>
								</artifactItem>
								<artifactItem>
									<groupId>io.joynr.java.backend-services</groupId>
									<artifactId>discovery-directory-servlet</artifactId>
									<version>${project.version}</version>
									<type>war</type>
									<outputDirectory>${project.build.directory}</outputDirectory>
									<destFileName>discovery.war</destFileName>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- jetty only needs to run in case of test execution -->
					<plugin>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-maven-plugin</artifactId>
						<version>${jetty.version}</version>
						<executions>
							<execution>
								<id>start-jetty</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>deploy-war</goal>
								</goals>
								<configuration>
									<daemon>true</daemon>
								</configuration>
							</execution>
							<execution>
								<id>stop-jetty</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- jasmine-node for node.js tests -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.3.1</version>
						<!-- configuration options documentation:
							http://mojo.codehaus.org/exec-maven-plugin/exec-mojo.html -->
						<executions>
							<!-- maven doesn't keep the execution permission of
								${project.build.testOutputDirectory}/node_run_unit_tests.sh.
								So we fix it here -->
							<execution>
								<configuration>
									<executable>chmod</executable>
									<commandlineArgs>+x ${project.build.testOutputDirectory}/node_run_unit_tests.sh</commandlineArgs>
								</configuration>
								<id>process-unit-tests-nodejs</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
							<execution>
								<configuration>
									<executable>${project.build.testOutputDirectory}/node_run_unit_tests.sh</executable>
									<commandlineArgs>--captureExceptions --verbose</commandlineArgs>
								</configuration>
								<id>run-unit-tests-nodejs</id>
								<phase>test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
